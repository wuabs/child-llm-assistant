import os
import json
import random
import openai
from friend_agent import build_prompt

# üîë –£—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤–æ–π –∫–ª—é—á —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
openai.api_key = os.getenv("OPENAI_API_KEY") or "sk-..."  # –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π –∫–ª—é—á

# üí¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—Ä–∞–∑ —Ä–µ–±—ë–Ω–∫–∞
ages = [7, 9, 11, 13, 15]
themes = ["–¥—Ä—É–∑—å—è", "—É—á—ë–±–∞", "—Ä–æ–¥–∏—Ç–µ–ª–∏", "—Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞", "–±—É–¥—É—â–µ–µ", "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ"]
expression_styles = {
    "—Å–æ–º–Ω–µ–Ω–∏–µ": "–≤ —Å—Ç–∏–ª–µ —Å–æ–º–Ω–µ–Ω–∏—è",
    "–≤–æ–ø—Ä–æ—Å": "–≤ —Ñ–æ—Ä–º–µ –≤–æ–ø—Ä–æ—Å–∞",
    "—Ç—Ä–µ–≤–æ–≥–∞": "–≤ —Å—Ç–∏–ª–µ —Ç—Ä–µ–≤–æ–≥–∏",
    "–∂–∞–ª–æ–±–∞": "–≤ —Ñ–æ—Ä–º–µ –∂–∞–ª–æ–±—ã",
    "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ": "–≤ —Å—Ç–∏–ª–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è"
}

def chat(prompt, system="–¢—ã ‚Äî —Ä–µ–±—ë–Ω–æ–∫, –≥–æ–≤–æ—Ä—è—â–∏–π –æ —Å–≤–æ–∏—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö.", max_tokens=100):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": system},
            {"role": "user", "content": prompt}
        ],
        temperature=0.9,
        max_tokens=max_tokens,
        top_p=0.95,
        frequency_penalty=0.1,
        presence_penalty=0.1
    )
    return response.choices[0].message["content"].strip()

def generate_child_phrase():
    age = random.choice(ages)
    theme = random.choice(themes)
    style_key = random.choice(list(expression_styles.keys()))
    style = expression_styles[style_key]

    prompt = (
        f"–¢—ã —Ä–µ–±—ë–Ω–æ–∫ {age} –ª–µ—Ç. –ù–∞–ø–∏—à–∏ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), "
        f"–≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –¥–µ–ª–∏—à—å—Å—è —Å–≤–æ–∏–º–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏ –Ω–∞ —Ç–µ–º—É ¬´{theme}¬ª {style}."
    )

    try:
        phrase = chat(prompt)
        return {
            "text": phrase,
            "age": age,
            "theme": theme,
            "style": style_key
        }

    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—Ä–∞–∑—ã —Ä–µ–±—ë–Ω–∫–∞]: {e}")
        return None

def generate_dialogs(n=30, output_path='data/child_dialogs.jsonl'):
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    with open(output_path, 'w', encoding='utf-8') as f:
        for i in range(n):
            child = generate_child_phrase()
            if not child: continue

            prompt = build_prompt(child['text'])

            try:
                reply = chat(prompt, system="–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Ä–µ–±—ë–Ω–∫—É.")
                f.write(json.dumps({
                    "child_input": child['text'],
                    "child_meta": {
                        "age": child['age'],
                        "theme": child['theme'],
                        "style": child['style']
                    },
                    "friend_reply": reply
                }, ensure_ascii=False) + '\n')

                print(f"[{i+1}/{n}] ‚úÖ")

            except Exception as e:
                print(f"[–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥—Ä—É–≥–∞]: {e}")

# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    generate_dialogs(n=10)
